import os
    
def createModelObject(name, fields):
    file = open('./app/models/Model' + name.capitalize() + '.php', "w")
    file.write('<?php\n')
    file.write('namespace backint\\app\\models;\n\n')
    file.write('use backint\\core\\Model;\n')
    file.write('use backint\\core\\ModelField;\n')
    file.write('use backint\\core\\db\\types\\IntegerU;\n\n')
    file.write('class Model' + name.capitalize() + ' extends Model {\n\n')
    file.write('\tpublic function __construct() {\n')
    file.write('\t\tparent::__construct();\n')
    file.write('\t\t$this->setModelName("' + name + '");\n')
    file.write('\t\t$this->setIdField(new ModelField("id", IntegerU::instance()));\n')
    for field in fields:
        file.write('\t\t$this->addField("' + field + '", );\n')
    file.write('\t}\n')
    for field in fields:
        file.write('\n\t/**\n')
        file.write('\t * Get ' + field + ' model field\n')
        file.write('\t * \n')
        file.write('\t * @return ModelField\n')
        file.write('\t */\n')
        file.write('\tpublic function get' + field.capitalize() + '() {\n')
        file.write('\t\treturn $this->fields["' + field + '"];\n')
        file.write('\t}\n')
        file.write('\n\t/**\n')
        file.write('\t * Set ' + field + ' model field\n')
        file.write('\t * \n')
        file.write('\t * @param ModelField\n')
        file.write('\t */\n')
        file.write('\tpublic function set' + field.capitalize() + '($field) {\n')
        file.write('\t\t$this->fields["' + field + '"] = $field;\n')
        file.write('\t}\n')
    file.write('}\n')
    file.write('?>')
    file.close()

def createControllerObject(name):
    file = open('./app/controllers/Controller' + name.capitalize() + '.php', "w")
    file.write('<?php\n')
    file.write('namespace backint\\app\\controllers;\n\n')
    file.write('use backint\\core\\db\\builder\\QueryBuilder;\n')
    file.write('use backint\\core\\db\\iQuickQuery;\n')
    file.write('use backint\\app\\models\\Model' + name.capitalize() + ';\n')
    file.write('use backint\\core\\Http;\n')
    file.write('use backint\\core\\Json;\n')
    file.write('use backint\\core\\ControllerBase;\n\n')
    file.write('class Controller' + name.capitalize() + ' extends ControllerBase {\n\n')
    file.write('\tprivate $model' + name.capitalize() + ';\n\n')
    file.write('\tprivate iQuickQuery $quickQuery;\n\n')
    file.write('\tprivate QueryBuilder $queryBuilder;\n\n')
    file.write('\tpublic function __construct(iQuickQuery $_quickQuery, QueryBuilder $_queryBuilder) {\n')
    file.write('\t\t$this->model' + name.capitalize() + ' = new Model' + name.capitalize() + '();\n')
    file.write('\t\t$this->quickQuery = $_quickQuery;\n')
    file.write('\t\t$this->queryBuilder = $_queryBuilder;\n')
    file.write('\t\t$this->setRouteSettings("GET", "get_by_id", false);\n')
    file.write('\t\t$this->setRouteSettings("POST", "create", false);\n')
    file.write('\t\t$this->setRouteSettings("PUT", "update", false);\n')
    file.write('\t\t$this->setRouteSettings("DELETE", "delete_by_id", false);\n')
    file.write('\t}\n\n')
    file.write('\t/**\n')
    file.write('\t * Get a record passing by param an id\n')
    file.write('\t * \n')
    file.write('\t * @param mixed $params\n')
    file.write('\t * \n')
    file.write('\t * @return void\n')
    file.write('\t */\n')
    file.write('\tpublic function get_by_id($params) {\n')
    file.write('\t\t$this->queryBuilder->select()->where()->addPKFilter($this->model' + name.capitalize() + ', $params[0]);\n')
    file.write('\t\t$this->model' + name.capitalize() + ' = $this->quickQuery->selectSimple($this->model' + name.capitalize() + ', $this->queryBuilder);\n')
    file.write('\t\tif(is_null($this->model' + name.capitalize() + ')) {\n')
    file.write('\t\t\tHttp::sendResponse(Http::NO_CONTENT);\n')
    file.write('\t\t} else {\n')
    file.write('\t\t\t$json = Json::convertModelToJSON($this->model' + name.capitalize() + ');\n')
    file.write('\t\t\tHttp::sendResponse(Http::OK, $json);\n')
    file.write('\t\t}\n')
    file.write('\t}\n\n')
    file.write('\t/**\n')
    file.write('\t * Insert a new record into database passing by body the info\n')
    file.write('\t * \n')
    file.write('\t * @param mixed $params\n')
    file.write('\t * \n')
    file.write('\t * @return void\n')
    file.write('\t */\n')
    file.write('\tpublic function create($params, $requestBody) {\n')
    file.write('\t\t$this->model' + name.capitalize() + ' = Json::fillObjectFromJSON($this->model' + name.capitalize() + ', $requestBody);\n')
    file.write('\t\t$result = $this->quickQuery->insert($this->model' + name.capitalize() + ');\n')
    file.write('\t\tif(!$result->getResult()) {\n')
    file.write('\t\t\t$result->sendResult(Http::BAD_REQUEST);\n')
    file.write('\t\t} else {\n')
    file.write('\t\t\tHttp::sendResponse(Http::CREATED, Json::messageToJSON("Created correctly"));\n')
    file.write('\t\t}\n')
    file.write('\t}\n\n')
    file.write('\t/**\n')
    file.write('\t * Update an existing record passing by body all information\n')
    file.write('\t * \n')
    file.write('\t * @param mixed $params\n')
    file.write('\t * \n')
    file.write('\t * @return void\n')
    file.write('\t */\n')
    file.write('\tpublic function update($params, $requestBody) {\n')
    file.write('\t\t$this->model' + name.capitalize() + ' = Json::fillObjectFromJSON($this->model' + name.capitalize() + ', $requestBody);\n')
    file.write('\t\t$result = $this->quickQuery->update($this->model' + name.capitalize() + ');\n')
    file.write('\t\tif(!$result->getResult()) {\n')
    file.write('\t\t\t$result->sendResult(Http::BAD_REQUEST);\n')
    file.write('\t\t} else {\n')
    file.write('\t\t\tHttp::sendResponse(Http::CREATED, Json::messageToJSON("Updated correctly"));\n')
    file.write('\t\t}\n')
    file.write('\t}\n\n')
    file.write('\t/**\n')
    file.write('\t * Delete a record passing by param an id\n')
    file.write('\t * \n')
    file.write('\t * @param mixed $params\n')
    file.write('\t * \n')
    file.write('\t * @return void\n')
    file.write('\t */\n')
    file.write('\tpublic function delete_by_id($params) {\n')
    file.write('\t\t$this->model' + name.capitalize() + '->getIdField()->value = $params[0];\n')
    file.write('\t\t$result = $this->quickQuery->delete($this->model' + name.capitalize() + ');\n')
    file.write('\t\tif(!$result->getResult()) {\n')
    file.write('\t\t\t$result->sendResult(Http::BAD_REQUEST);\n')
    file.write('\t\t} else {\n')
    file.write('\t\t\tHttp::sendResponse(Http::CREATED, Json::messageToJSON("Deleted correctly"));\n')
    file.write('\t\t}\n')
    file.write('\t}\n')
    file.write('}\n')
    file.write('?>')
    file.close()

try:
    command = ""
    while command != "exit":
        command = input("Type your command:")
        command = command.lower()
        keyWord = command.split(" ")
        params = keyWord[4:]
        if keyWord[0] == "itk":
            action = keyWord[1]
            if action == "-g" or action == "generate":
                fileType = keyWord[2]
                if fileType == "model" or fileType == "-m":
                    arg = keyWord[3]
                    if len(arg) > 0:
                        createModelObject(arg, params)
                    else:
                        print("Invalid command")
                elif fileType == "controller" or fileType == "-c":
                    arg = keyWord[3]
                    if len(arg) > 0:
                        createControllerObject(arg)
                    else:
                        print("Invalid command")
                elif fileType == "all" or fileType == "-a":
                    arg = keyWord[3]
                    if len(arg) > 0:
                        createControllerObject(arg)
                        createModelObject(arg, params)
                    else:
                        print("Invalid command")
                elif fileType == "-h" or fileType == "help" or fileType == "?":
                    print(os.linesep + "Welcome to backint cmd help guide.")
                    print("\nYou can choose these next options: \n\n")
                    print("\tmodel [arg] | -m [arg] -> to generate a Model object file\n\n")
                    print("\tcontroller [arg] | -c [arg] -> to generate a Controller object file\n\n")
                    print("You can type also 'exit' to get out.\n")
                else:
                    print("Invalid command")
            elif action == "-h" or action == "help" or action == "?":
                print(os.linesep + "Welcome to backint cmd help guide.")
                print("\nYou can choose these next options: \n\n")
                print("\tgenerate | -g -> to generate an object file\n\n")
                print("You can type also 'exit' to get out.\n")
            else:
                print("Invalid command")
        elif keyWord[0] == "exit":
            print("See you later!")
        else:
            print("Invalid command")
except:
    print("Invalid format. Check our commands typing `itk help` to see them.")